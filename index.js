
function wktToLatLngArray(wkt) {
    // Extract the coordinates part from WKT
    const coordinatesParts = wkt.match(/\(\((.*?)\)\)/);
    console.log(coordinatesParts);

    if (!coordinatesParts || !coordinatesParts[1]) {
        throw new Error('No coordinates found in WKT');
    }

    const coordinatesArray = coordinatesParts[1].split(', ').map(coord => {
        const [lng, lat] = coord.split(' ').map(Number);
        return { lat, lng };
    });

    return coordinatesArray;
}


const ps = [
    {
        name: "מרכז העיר",
        color: "orange",
        p: `POLYGON ((34.841165 32.081751, 34.841182 32.082723, 34.840418 32.08422, 34.839783 32.085744, 34.838103 32.085434, 34.832372 32.085866, 34.830098 32.086204, 34.829849 32.083868, 34.829585 32.08334, 34.828616 32.082929, 34.825768 32.082606, 34.825827 32.082424, 34.825886 32.082247, 34.825944 32.08207, 34.826004 32.081889, 34.826056 32.081731, 34.826108 32.081574, 34.826144 32.081459, 34.826149 32.081442, 34.826151 32.081432, 34.826198 32.081278, 34.826231 32.081171, 34.826242 32.08113, 34.826292 32.080965, 34.826307 32.080916, 34.826342 32.080801, 34.826381 32.080667, 34.826389 32.080638, 34.82644 32.080472, 34.826449 32.080444, 34.826488 32.080312, 34.826511 32.080242, 34.826539 32.080149, 34.826558 32.080089, 34.826587 32.079988, 34.826589 32.079981, 34.826627 32.079853, 34.826633 32.079832, 34.826666 32.07972, 34.826681 32.07967, 34.826705 32.079588, 34.826728 32.079512, 34.826746 32.07945, 34.826774 32.079353, 34.826785 32.079316, 34.826841 32.079129, 34.826843 32.079121, 34.826877 32.079, 34.82688 32.07899, 34.826919 32.07885, 34.826921 32.078842, 34.826963 32.078703, 34.826968 32.078683, 34.827003 32.078564, 34.827015 32.078522, 34.827033 32.078466, 34.827057 32.078381, 34.827068 32.078346, 34.827076 32.078319, 34.827112 32.078194, 34.827113 32.078183, 34.827118 32.078165, 34.827137 32.078094, 34.827177 32.077945, 34.827188 32.077913, 34.827239 32.077736, 34.827299 32.077556, 34.827325 32.077479, 34.827407 32.07724, 34.82744 32.077146, 34.82745 32.077115, 34.827469 32.077054, 34.827478 32.077001, 34.827513 32.076735, 34.827516 32.076707, 34.827531 32.076587, 34.827547 32.076463, 34.827573 32.076265, 34.827599 32.076068, 34.827625 32.075872, 34.827681 32.075451, 34.827685 32.075425, 34.827999 32.075463, 34.828025 32.075461, 34.828327 32.0755, 34.828374 32.075506, 34.828595 32.075532, 34.828681 32.075543, 34.82876 32.075555, 34.828861 32.075567, 34.828976 32.07558, 34.829193 32.075606, 34.829291 32.075617, 34.82962 32.075656, 34.830583 32.075769, 34.831124 32.075831, 34.831653 32.075894, 34.831935 32.075932, 34.832032 32.075943, 34.832354 32.075981, 34.832505 32.075564, 34.833443 32.075738, 34.835115 32.075606, 34.835979 32.076264, 34.836881 32.07711, 34.838334 32.079112, 34.83945 32.080404, 34.841165 32.081751))`
    },
    {
        name: "קרית הרצוג",
        color: "purple",
        p: `POLYGON ((34.845813 32.092604, 34.845877 32.095067, 34.845945 32.095406, 34.846048 32.095922, 34.846093 32.096152, 34.846582 32.097517, 34.846738 32.097965, 34.846974 32.098537, 34.847042 32.098702, 34.847199 32.099113, 34.847777 32.100727, 34.848126 32.102009, 34.84824 32.102515, 34.848456 32.103383, 34.849053 32.106016, 34.849248 32.107029, 34.849062 32.107074, 34.848952 32.107097, 34.848883 32.107104, 34.848632 32.107104, 34.848525 32.107087, 34.848507 32.10708, 34.848503 32.107079, 34.84836 32.10703, 34.847925 32.106776, 34.847641 32.106667, 34.847455 32.106623, 34.847283 32.106601, 34.847043 32.106598, 34.846759 32.106597, 34.846653 32.106617, 34.846555 32.106657, 34.846501 32.106693, 34.846495 32.106698, 34.846464 32.106718, 34.846205 32.107003, 34.845685 32.107414, 34.845431 32.107627, 34.844583 32.108032, 34.844359 32.108124, 34.843949 32.108273, 34.843571 32.10838, 34.843402 32.108407, 34.843184 32.108418, 34.842964 32.108408, 34.842767 32.108385, 34.842595 32.108334, 34.842414 32.108244, 34.842263 32.108125, 34.842138 32.107917, 34.841925 32.107412, 34.841841 32.107272, 34.841727 32.107111, 34.841608 32.106992, 34.841474 32.106895, 34.841336 32.106854, 34.84113 32.106867, 34.840917 32.106891, 34.840262 32.106999, 34.84007 32.107019, 34.83991 32.107017, 34.839753 32.10698, 34.839517 32.106822, 34.839376 32.106708, 34.839197 32.106563, 34.838871 32.106364, 34.838379 32.106151, 34.837779 32.105908, 34.837105 32.105688, 34.836065 32.105199, 34.835886 32.105152, 34.83563 32.105154, 34.834961 32.105211, 34.834842 32.105219, 34.83345 32.105305, 34.833115 32.105358, 34.832517 32.105487, 34.831922 32.105636, 34.831418 32.105698, 34.831408 32.1057, 34.830745 32.105782, 34.830526 32.105795, 34.83022 32.105814, 34.829682 32.105828, 34.828729 32.105826, 34.828416 32.105761, 34.82829 32.105728, 34.828288 32.105728, 34.828025 32.10566, 34.827889 32.105626, 34.827804 32.105604, 34.827661 32.105566, 34.827685 32.105377, 34.827699 32.105276, 34.827714 32.105162, 34.827721 32.105022, 34.827725 32.104684, 34.827719 32.104306, 34.827717 32.103974, 34.827739 32.103762, 34.827767 32.103185, 34.827791 32.102663, 34.827854 32.101914, 34.827901 32.10155, 34.827938 32.10126, 34.828089 32.100397, 34.828128 32.100225, 34.828303 32.099651, 34.828412 32.099326, 34.828529 32.09897, 34.82846 32.09895, 34.824711 32.097885, 34.823831 32.097636, 34.82376 32.097616, 34.822961 32.097389, 34.822042 32.097128, 34.821937 32.097083, 34.821853 32.097048, 34.821793 32.097014, 34.821733 32.096979, 34.821621 32.096908, 34.821571 32.096865, 34.821442 32.096743, 34.821518 32.096663, 34.821568 32.09659, 34.821586 32.096549, 34.821607 32.096477, 34.821623 32.096421, 34.821667 32.096056, 34.821715 32.095761, 34.8218 32.095167, 34.821807 32.095116, 34.821815 32.095089, 34.821938 32.094641, 34.822078 32.094038, 34.822223 32.09334, 34.822467 32.092155, 34.822554 32.091697, 34.822602 32.091461, 34.822624 32.091274, 34.822662 32.090958, 34.826913 32.091799, 34.827283 32.091845, 34.830436 32.091522, 34.833574 32.092461, 34.836393 32.092931, 34.842669 32.092649, 34.845813 32.092604))`
    },
    {
        name: "שיכון ה",
        color: "blue",
        p: `POLYGON ((34.844044 32.076302, 34.844064 32.076389, 34.844077 32.076474, 34.844091 32.076559, 34.844104 32.076644, 34.844117 32.07673, 34.844131 32.076815, 34.844144 32.0769, 34.844158 32.076982, 34.844172 32.077064, 34.844186 32.077146, 34.844201 32.077228, 34.844212 32.077295, 34.844224 32.077362, 34.844236 32.07743, 34.844247 32.077497, 34.844264 32.077586, 34.84428 32.077675, 34.844297 32.077763, 34.844313 32.077852, 34.84433 32.077941, 34.844346 32.078029, 34.844361 32.078107, 34.844375 32.078185, 34.84439 32.078264, 34.844404 32.078342, 34.844419 32.07842, 34.844433 32.078498, 34.844448 32.078576, 34.844464 32.078658, 34.84448 32.078741, 34.844496 32.078823, 34.844512 32.078905, 34.844528 32.078987, 34.844544 32.079069, 34.844561 32.079152, 34.844577 32.079234, 34.844593 32.079316, 34.844609 32.079398, 34.844625 32.079481, 34.844641 32.079563, 34.844659 32.079642, 34.844677 32.079721, 34.844695 32.0798, 34.844712 32.07988, 34.84473 32.079959, 34.844748 32.080038, 34.844766 32.080117, 34.844784 32.080197, 34.8448 32.080281, 34.844817 32.080366, 34.844833 32.080451, 34.844849 32.080535, 34.844866 32.08062, 34.844882 32.080704, 34.844899 32.080789, 34.844914 32.080875, 34.84493 32.080962, 34.844946 32.081048, 34.844961 32.081134, 34.844977 32.081221, 34.844993 32.081307, 34.845009 32.081393, 34.845024 32.08148, 34.84504 32.081566, 34.845056 32.081652, 34.845072 32.081739, 34.845087 32.081825, 34.845103 32.081911, 34.845119 32.081998, 34.84514 32.082086, 34.845162 32.082173, 34.845183 32.082261, 34.845205 32.082349, 34.845226 32.082436, 34.845248 32.082524, 34.845269 32.082612, 34.845286 32.082697, 34.845304 32.082781, 34.845321 32.082866, 34.845339 32.082951, 34.845356 32.083036, 34.845374 32.083121, 34.845386 32.083181, 34.845399 32.083242, 34.845411 32.083302, 34.845421 32.083358, 34.84543 32.083414, 34.845431 32.083423, 34.84544 32.083479, 34.845454 32.083562, 34.845468 32.083646, 34.845482 32.083729, 34.845496 32.083812, 34.845509 32.083896, 34.845524 32.083975, 34.845539 32.084053, 34.845554 32.084132, 34.845569 32.084211, 34.845585 32.08429, 34.8456 32.084369, 34.845615 32.084448, 34.84563 32.084526, 34.845644 32.084606, 34.845659 32.084685, 34.845674 32.084765, 34.845689 32.084844, 34.845703 32.084923, 34.845718 32.085003, 34.845733 32.085082, 34.845748 32.085162, 34.845762 32.085241, 34.845767 32.085308, 34.845772 32.085375, 34.845776 32.085442, 34.845782 32.085519, 34.845787 32.085595, 34.845792 32.085672, 34.845798 32.085748, 34.845799 32.085837, 34.845801 32.085925, 34.845802 32.086014, 34.845804 32.086103, 34.845805 32.086191, 34.845807 32.08628, 34.845808 32.08636, 34.845809 32.08644, 34.845811 32.086521, 34.845812 32.086601, 34.845813 32.086681, 34.845815 32.086761, 34.845816 32.086842, 34.845816 32.086929, 34.845816 32.087017, 34.845816 32.087104, 34.845815 32.087192, 34.845815 32.087279, 34.845815 32.087367, 34.845815 32.087455, 34.845815 32.087542, 34.845815 32.08763, 34.845815 32.087717, 34.845815 32.087805, 34.845815 32.087892, 34.845814 32.08798, 34.845814 32.088068, 34.845814 32.088155, 34.845814 32.088243, 34.845814 32.0883, 34.845814 32.088357, 34.845814 32.088446, 34.845814 32.088536, 34.845813 32.088625, 34.845813 32.088714, 34.845813 32.088804, 34.845813 32.088893, 34.845813 32.088983, 34.845812 32.089072, 34.845812 32.089161, 34.845812 32.089251, 34.845812 32.08934, 34.845812 32.08943, 34.845811 32.089519, 34.845811 32.089608, 34.845811 32.089698, 34.845811 32.089787, 34.845811 32.089877, 34.84581 32.089966, 34.84581 32.090055, 34.84581 32.090145, 34.84581 32.090234, 34.84581 32.090239, 34.84581 32.090241, 34.84581 32.090358, 34.845813 32.092604, 34.842669 32.092649, 34.839477 32.092792, 34.83943 32.091673, 34.83872 32.089881, 34.839009 32.087597, 34.840418 32.08422, 34.841182 32.082723, 34.841165 32.081751, 34.841541 32.079834, 34.84265 32.076997, 34.842725 32.076592, 34.844044 32.076302))`
    },
    {
        name: "מערב העיר",
        color: "red",
        p: `POLYGON ((34.839783 32.085744, 34.839009 32.087597, 34.83872 32.089881, 34.83943 32.091673, 34.839477 32.092792, 34.836393 32.092931, 34.833574 32.092461, 34.830436 32.091522, 34.827283 32.091845, 34.826913 32.091799, 34.822662 32.090958, 34.822667 32.090914, 34.822632 32.090711, 34.82266 32.08999, 34.82267 32.089576, 34.822675 32.089143, 34.822659 32.087856, 34.82256 32.087864, 34.822558 32.08781, 34.822534 32.087609, 34.822514 32.087452, 34.822497 32.0873, 34.822472 32.087127, 34.822444 32.086931, 34.82242 32.086774, 34.822378 32.086536, 34.822351 32.086387, 34.822324 32.086232, 34.822299 32.086089, 34.822266 32.085903, 34.822234 32.085722, 34.822205 32.085554, 34.822177 32.085393, 34.822144 32.085206, 34.822112 32.085031, 34.822095 32.084932, 34.822185 32.084926, 34.822224 32.084923, 34.822439 32.084909, 34.822442 32.084909, 34.82266 32.084894, 34.822861 32.08488, 34.822954 32.084874, 34.823041 32.084867, 34.82324 32.084855, 34.823512 32.084836, 34.823615 32.084829, 34.823767 32.08482, 34.824011 32.084802, 34.824265 32.084784, 34.824372 32.084778, 34.824436 32.084773, 34.824502 32.084769, 34.824674 32.084757, 34.824758 32.084749, 34.824772 32.084748, 34.824817 32.084745, 34.824912 32.084738, 34.825041 32.084729, 34.825071 32.084727, 34.825106 32.084627, 34.825128 32.084561, 34.825135 32.08454, 34.825159 32.084472, 34.825179 32.084411, 34.825196 32.084354, 34.825259 32.084163, 34.825294 32.084056, 34.825321 32.083973, 34.825348 32.083885, 34.825359 32.083851, 34.825381 32.083783, 34.825446 32.083584, 34.825468 32.083513, 34.825514 32.083376, 34.825522 32.083356, 34.825597 32.083128, 34.825642 32.082989, 34.825659 32.082938, 34.82573 32.082723, 34.825738 32.082698, 34.825768 32.082606, 34.828616 32.082929, 34.829585 32.08334, 34.829849 32.083868, 34.830098 32.086204, 34.832372 32.085866, 34.838103 32.085434, 34.839783 32.085744))`
    },{
        name: "שיכון ו",
        color: "green",
        p: `POLYGON ((34.832505 32.075564, 34.832509 32.075554, 34.832548 32.075445, 34.832612 32.075267, 34.832678 32.075085, 34.832714 32.074986, 34.832723 32.07496, 34.832748 32.074891, 34.833111 32.074935, 34.83312 32.074872, 34.833093 32.073917, 34.833093 32.073812, 34.833083 32.073076, 34.833067 32.072994, 34.833044 32.072854, 34.832993 32.072534, 34.83289 32.071908, 34.832957 32.071893, 34.832967 32.071891, 34.832974 32.071889, 34.833027 32.071876, 34.835495 32.071279, 34.835468 32.071193, 34.83588 32.071066, 34.83596 32.071042, 34.836271 32.070947, 34.836285 32.070942, 34.836552 32.07086, 34.836554 32.07086, 34.836845 32.070771, 34.837038 32.070712, 34.837147 32.070679, 34.837383 32.070606, 34.837413 32.070597, 34.837482 32.070576, 34.837643 32.070526, 34.837932 32.070438, 34.838061 32.070398, 34.838327 32.070317, 34.8385 32.070263, 34.838571 32.070242, 34.838616 32.070228, 34.838671 32.070212, 34.838947 32.070128, 34.839059 32.070094, 34.839415 32.069987, 34.839435 32.069981, 34.839234 32.069686, 34.839233 32.069685, 34.839199 32.069636, 34.839137 32.06954, 34.839239 32.06952, 34.839259 32.069514, 34.839269 32.069511, 34.839802 32.069352, 34.839914 32.069319, 34.840162 32.069245, 34.840227 32.069226, 34.840291 32.069205, 34.840327 32.069194, 34.840525 32.069135, 34.840736 32.069075, 34.840787 32.06906, 34.84101 32.069009, 34.841039 32.068995, 34.841347 32.069419, 34.84189 32.07017, 34.842459 32.071071, 34.842753 32.071617, 34.842951 32.072037, 34.843113 32.072434, 34.843271 32.072819, 34.84329 32.072873, 34.843321 32.072956, 34.843344 32.073041, 34.843367 32.073126, 34.84339 32.073211, 34.843413 32.073296, 34.843436 32.07338, 34.843459 32.073465, 34.843483 32.07355, 34.843506 32.073635, 34.843529 32.07372, 34.843552 32.073805, 34.843575 32.07389, 34.843598 32.073975, 34.843621 32.07406, 34.843636 32.074113, 34.84365 32.074166, 34.843664 32.074242, 34.843677 32.074318, 34.84369 32.074394, 34.843704 32.074471, 34.843717 32.074547, 34.843725 32.07459, 34.84374 32.074675, 34.843755 32.074761, 34.843769 32.074841, 34.843783 32.074922, 34.843796 32.074994, 34.843808 32.075067, 34.843821 32.075136, 34.843833 32.075206, 34.843836 32.075224, 34.843846 32.075283, 34.843855 32.075342, 34.843861 32.075379, 34.843876 32.075468, 34.843888 32.075539, 34.843899 32.07561, 34.843911 32.075683, 34.843921 32.075745, 34.843931 32.075806, 34.843941 32.075868, 34.843962 32.075955, 34.843982 32.076041, 34.844003 32.076128, 34.844023 32.076215, 34.844044 32.076302, 34.842725 32.076592, 34.84265 32.076997, 34.841541 32.079834, 34.841165 32.081751, 34.83945 32.080404, 34.838334 32.079112, 34.836881 32.07711, 34.835979 32.076264, 34.835115 32.075606, 34.833443 32.075738, 34.832505 32.075564))`
    }
]

function initAutocomplete() {
    const map = new google.maps.Map(document.getElementById("map"), {
        center: { lat: 32.0884402, lng: 34.8368078 },
        zoom: 15,
        // disable buttons
        disableDefaultUI: true,
    });
    // Create the search box and link it to the UI element.
    const input = document.getElementById("pac-input");
    const searchBox = new google.maps.places.SearchBox(input);

    map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
    // Bias the SearchBox results towards current map's viewport.
    map.addListener("bounds_changed", () => {
        // clear all the polygons from the map
        map.data.forEach((feature) => {
            map.data.remove(feature);
        });
        searchBox.setBounds(map.getBounds());
    });

    let markers = [];

    // Listen for the event fired when the user selects a prediction and retrieve
    // more details for that place.
    searchBox.addListener("places_changed", () => {
        const places = searchBox.getPlaces();

        if (places.length == 0) {
            return;
        }
        const l = places[0].geometry.location

        // find in which polygon the point is
        const match = ps.find(po => {
            const triangleCoords = wktToLatLngArray(po.p);
            const p = new google.maps.Polygon({ paths: triangleCoords });
            return google.maps.geometry.poly.containsLocation(l, p)
        }
        )
        console.log(match);

        // draw the polygon on the map
        const triangleCoords = wktToLatLngArray(match.p);
        const p = new google.maps.Polygon({ 
            paths: triangleCoords,
            strokeColor: "#FF0000",
            strokeOpacity: 0.8,
            strokeWeight: 2,
            fillColor: match.color,
            fillOpacity: 0.35,
         });
        p.setMap(map);

        // Clear out the old markers.
        markers.forEach((marker) => {
            marker.setMap(null);
        });
        markers = [];
        // For each place, get the icon, name and location.
        const bounds = new google.maps.LatLngBounds();
        const marker = new google.maps.Marker({
            map,
            title: places[0].name,
            position: l,
        });
        markers.push(marker);
        bounds.extend(marker.getPosition());
        // add bound with the name of the polygon
        const infowindow = new google.maps.InfoWindow({
            content: `<h2 style="margin: 10px; text-align: center">${match.name}</h2>`
        });
        infowindow.open(map, marker);
    });
}

window.initAutocomplete = initAutocomplete;